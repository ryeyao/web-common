{
  "author": {
    "name": "Diogo Resende",
    "email": "dresende@thinkdigital.pt"
  },
  "name": "enforce",
  "description": "NodeJS data validations",
  "keywords": [
    "enforce",
    "validation",
    "manipulation"
  ],
  "version": "0.1.1",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "http://github.com/dresende/node-enforce.git"
  },
  "scripts": {
    "test": "make"
  },
  "main": "./index",
  "engines": {
    "node": "*"
  },
  "analyse": false,
  "devDependencies": {
    "mocha": "1.12.0",
    "should": "1.2.2"
  },
  "readme": "## Data Validations [![Build Status](https://secure.travis-ci.org/dresende/node-enforce.png?branch=master)](http://travis-ci.org/dresende/node-enforce)\n\nThis is the package responsible for data validations in [ORM](http://dresende.github.io/node-orm2).\n\n### Enforce\n\nYou can create a list of validations for several properties of an `Object` and then run the checks to\nsee if everything is OK.\n\n```js\nvar enforce = require(\"enforce\");\nvar checks  = new enforce.Enforce();\n\nchecks\n\t.add(\"name\", enforce.notEmptyString())\n\t.add(\"age\", enforce.ranges.number(18, undefined, \"under-age\"));\n\nchecks.check({\n\tname : \"John Doe\",\n\tage  : 16\n}, function (err) {\n\t// err should have an error with \"msg\" = \"under-age\"\n});\n```\n\nYou can pass some options in the constructor. One of them is `returnAllErrors` which makes the validations\nbe all checked before returning errors. With this option, if any error is found, even if it's only one, it will be\nreturned in an `Array`.\n\n```js\nvar enforce = require(\"enforce\");\nvar checks  = new enforce.Enforce({\n\treturnAllErrors : true\n});\n\nchecks\n\t.add(\"name\", enforce.notEmptyString())\n\t.add(\"name\", enforce.ranges.length(2)) // yes, you can have multiple validators per property\n\t.add(\"age\", enforce.ranges.number(18, undefined, \"under-age\"));\n\nchecks.check({\n\tname : \"J\",\n\tage  : 16\n}, function (err) {\n\tconsole.log(err);\n\t// [ { [Error: \"out-of-range-length\"], property: \"name\", value: \"J\" },\n\t//   { [Error: \"under-age\"], property: \"age\", value: 16 }]\n});\n```\n\n### Validators\n\nAll validators accept a `msg` argument at the end. These argument is the error message returned if the\nvalidation fails. All validators return a `function` that is called by `Enforce` with the value of the property\nin question and a `next` callback.\n\n#### `enforce.required([ msg = \"required\" ])`\n\nChecks if a property is not `null` and not `undefined`. If can be `false`, `0` or `\"\"`.\n\n#### `enforce.notEmptyString([ msg = \"empty-string\" ])`\n\nChecks if a property length is not zero. It can actually work with `Array`s.\n\n#### `enforce.lists.inside(Array[, msg = \"outside-list\" ])`\n\nChecks if the property is inside a list of items (the `Array`).\n\n#### `enforce.lists.outside(Array[, msg = \"inside-list\" ])`\n\nChecks if the property is not inside a list of items (the `Array`).\n\n#### `enforce.ranges.number(min[, max[, msg = \"out-of-range-number\" ]])`\n\nChecks if a value is inside a specific range of numbers. Either `min` or `max` can be set to `undefined` meaning\nthat range side is `Infinity`.\n\n#### `enforce.ranges.length(min[, max[, msg = \"out-of-range-length\" ]])`\n\nDoes the same as the above but for the `length` property.\n\n#### `enforce.security.password([ checks = \"luns6\", ]msg = \"weak-password\")`\n\nChecks if a value has some types of characters and a minimal length. `checks` has a default string which means:\n\n- `l`: lowercase letters\n- `u`: uppercase letters\n- `n`: numbers\n- `s`: special characters\n- `6`: minimal length of 6\n\nYou can of course change this to \"lu4\" (lowercase, uppercase, minimal length of 4). Please note that if you pass only one argument\nto this validator, it will assume it's the `msg` argument. If you want to change the default checks, you have to pass both arguments.\n\n#### `enforce.patterns.match(pattern, modifiers[, msg = \"no-pattern-match\" ])\n\nChecks if property passes a specific regular expression. You can pass the `pattern` as a `RegExp` object (setting `modifiers` as `null`)\nor just pass a regular expression and it will be converted.\n\n#### `enforce.patterns.hexString([ msg = \"not-hex-string\" ])\n\nChecks if a property matches a predefined `RegExp` object accepting insensitive hexadecimal characters.\n\n#### `enforce.patterns.email([ msg = \"not-valid-email\" ])\n\nChecks if a property matches a predefined `RegExp` object accepting valid e-mail addresses.\n\n#### `enforce.patterns.ipv4([ msg = \"not-valid-ipv4\" ])\n\nChecks if a property matches a predefined `RegExp` object accepting valid IPv4 address.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/dresende/node-enforce/issues"
  },
  "_id": "enforce@0.1.1",
  "dist": {
    "shasum": "786faed5ed12127e83904f134e3ae315170e1f9c"
  },
  "_from": "enforce@0.1.1",
  "_resolved": "https://registry.npmjs.org/enforce/-/enforce-0.1.1.tgz"
}

{
  "name": "xlsx",
  "version": "0.2.7-d",
  "author": {
    "name": "Niggler"
  },
  "description": "(one day) a full-featured XLSX parser and writer.  For now, primitive parser",
  "keywords": [
    "xlsx",
    "office",
    "excel",
    "spreadsheet"
  ],
  "bin": {
    "xlsx2csv": "./bin/xlsx2csv.njs"
  },
  "main": "./xlsx",
  "repository": {
    "type": "git",
    "url": "git://github.com/Niggler/js-xlsx.git"
  },
  "bugs": {
    "url": "https://github.com/Niggler/js-xlsx/issues"
  },
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# xlsx\n\nCurrently a parser for XLSX files.  Cleanroom implementation from the ISO 29500  Office Open XML specifications.\n\nThis has been tested on some very basic XLSX files generated from Excel 2011.\n\n*THIS WAS WHIPPED UP VERY QUICKLY TO SATISFY A VERY SPECIFIC NEED*.  If you need something that is not currently supported, file an issue and attach a sample file.  I will get to it :)\n\n## Installation\n\nIn node:\n\n    npm install xlsx\n\nIn the browser:\n\n    <script lang=\"javascript\" src=\"/path/to/jszip.js\"></script>\n    <script lang=\"javascript\" src=\"/path/to/xlsx.js\"></script>\n\n## Tested Environments\n\n - Node 0.8.14, 0.10.1\n - IE 6/7/8/9/10 using Base64 mode (IE10 using HTML5 mode)\n - FF 18 using Base64 or HTML5 mode\n - Chrome 24 using Base64 or HTML5 mode\n\n## Usage\n\nSee `xlsx2csv.njs` in the bin directory for usage in node.\n\nSee http://niggler.github.com/js-xlsx/ for a browser example. \n\nNote that IE does not support HTML5 File API, so the base64 mode is provided for testing.  On OSX you can get the base64 encoding by running:\n\n    $ <target_file.xlsx base64 | pbcopy # the pbcopy puts the content in the clipboard\n\n## Notes \n\n`.SheetNames` is an ordered list of the sheets in the workbook\n\n`.Sheets[sheetname]` returns a data structure representing the sheet.  Each key\nthat does not start with `!` corresponds to a cell (using `A-1` notation).  \n\n`.Sheets[sheetname][address].v` returns the value of the specified cell and `.Sheets[sheetname][address].t` returns the type of the cell (constrained to the enumeration `ST_CellType` as documented in page 4215 of ISO/IEC 29500-1:2012(E) ) \n\nSimple usage:\n\n    var XLSX = require('xlsx')\n    var xlsx = XLSX.readFile('test.xlsx');\n    var sheet_name_list = xlsx.SheetNames;\n    xlsx.SheetNames.forEach(function(y) {\n      for (z in xlsx.Sheets[y]) {\n        if(z[0] === '!') continue;\n        console.log(y + \"!\" + z + \"=\" + JSON.stringify(xlsx.Sheets[y][z].v));\n      }\n    });\n\nFor more details:\n\n- `bin/xlsx2csv.njs` is a tool for node\n- `index.html` is the live demo\n- `bits/90_utils.js` contains the logic for generating CSV and JSON from sheets\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly granted by the MIT license are reserved by the Original Author.\n\n## XLS Support\n\nXLS is not supported in this module.  Due to Licensing issues [that are discussed in more detail elsewhere](https://github.com/Niggler/js-xls/issues/1#issuecomment-13852286), the implementation cannot be released in a GPL or MIT-style license.  If you need XLS support, consult [my js-xls project](https://github.com/Niggler/js-xls).\n\n## References\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\n",
  "readmeFilename": "README.md",
  "_id": "xlsx@0.2.7-d",
  "_from": "xlsx@"
}
